package com.epam.sb.students.model.impl;

import com.epam.sb.students.model.Course;
import com.epam.sb.students.model.CourseModel;
import com.epam.sb.students.model.CourseSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;student_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.epam.sb.students.model.CourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CourseImpl
 * @see com.epam.sb.students.model.Course
 * @see com.epam.sb.students.model.CourseModel
 * @generated
 */
@JSON(strict = true)
public class CourseModelImpl extends BaseModelImpl<Course>
    implements CourseModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a course model instance should use the {@link com.epam.sb.students.model.Course} interface instead.
     */
    public static final String TABLE_NAME = "student_Course";
    public static final Object[][] TABLE_COLUMNS = {
            { "courseId", Types.BIGINT },
            { "courseName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table student_Course (courseId LONG not null primary key,courseName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table student_Course";
    public static final String ORDER_BY_JPQL = " ORDER BY course.courseName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY student_Course.courseName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.epam.sb.students.model.Course"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.epam.sb.students.model.Course"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final String MAPPING_TABLE_STUDENT_STUDENTS_COURSES_NAME = "student_Students_Courses";
    public static final Object[][] MAPPING_TABLE_STUDENT_STUDENTS_COURSES_COLUMNS =
        {
            { "courseId", Types.BIGINT },
            { "studentId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_STUDENT_STUDENTS_COURSES_SQL_CREATE =
        "create table student_Students_Courses (courseId LONG not null,studentId LONG not null,primary key (courseId, studentId))";
    public static final boolean FINDER_CACHE_ENABLED_STUDENT_STUDENTS_COURSES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.student_Students_Courses"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.epam.sb.students.model.Course"));
    private static ClassLoader _classLoader = Course.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Course.class };
    private long _courseId;
    private String _courseName;
    private Course _escapedModel;

    public CourseModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Course toModel(CourseSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Course model = new CourseImpl();

        model.setCourseId(soapModel.getCourseId());
        model.setCourseName(soapModel.getCourseName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Course> toModels(CourseSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Course> models = new ArrayList<Course>(soapModels.length);

        for (CourseSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _courseId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCourseId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _courseId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Course.class;
    }

    @Override
    public String getModelClassName() {
        return Course.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("courseId", getCourseId());
        attributes.put("courseName", getCourseName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long courseId = (Long) attributes.get("courseId");

        if (courseId != null) {
            setCourseId(courseId);
        }

        String courseName = (String) attributes.get("courseName");

        if (courseName != null) {
            setCourseName(courseName);
        }
    }

    @JSON
    @Override
    public long getCourseId() {
        return _courseId;
    }

    @Override
    public void setCourseId(long courseId) {
        _courseId = courseId;
    }

    @JSON
    @Override
    public String getCourseName() {
        if (_courseName == null) {
            return StringPool.BLANK;
        } else {
            return _courseName;
        }
    }

    @Override
    public void setCourseName(String courseName) {
        _courseName = courseName;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Course.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Course toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Course) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CourseImpl courseImpl = new CourseImpl();

        courseImpl.setCourseId(getCourseId());
        courseImpl.setCourseName(getCourseName());

        courseImpl.resetOriginalValues();

        return courseImpl;
    }

    @Override
    public int compareTo(Course course) {
        int value = 0;

        value = getCourseName().compareTo(course.getCourseName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Course)) {
            return false;
        }

        Course course = (Course) obj;

        long primaryKey = course.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Course> toCacheModel() {
        CourseCacheModel courseCacheModel = new CourseCacheModel();

        courseCacheModel.courseId = getCourseId();

        courseCacheModel.courseName = getCourseName();

        String courseName = courseCacheModel.courseName;

        if ((courseName != null) && (courseName.length() == 0)) {
            courseCacheModel.courseName = null;
        }

        return courseCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{courseId=");
        sb.append(getCourseId());
        sb.append(", courseName=");
        sb.append(getCourseName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.epam.sb.students.model.Course");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>courseId</column-name><column-value><![CDATA[");
        sb.append(getCourseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>courseName</column-name><column-value><![CDATA[");
        sb.append(getCourseName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
