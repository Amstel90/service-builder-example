package com.epam.sb.students.model.impl;

import com.epam.sb.students.model.Student;
import com.epam.sb.students.model.StudentModel;
import com.epam.sb.students.model.StudentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;student_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.epam.sb.students.model.StudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @see com.epam.sb.students.model.Student
 * @see com.epam.sb.students.model.StudentModel
 * @generated
 */
@JSON(strict = true)
public class StudentModelImpl extends BaseModelImpl<Student>
    implements StudentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a student model instance should use the {@link com.epam.sb.students.model.Student} interface instead.
     */
    public static final String TABLE_NAME = "student_Student";
    public static final Object[][] TABLE_COLUMNS = {
            { "studentId", Types.BIGINT },
            { "studentName", Types.VARCHAR },
            { "grade", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table student_Student (studentId LONG not null primary key,studentName VARCHAR(75) null,grade DOUBLE)";
    public static final String TABLE_SQL_DROP = "drop table student_Student";
    public static final String ORDER_BY_JPQL = " ORDER BY student.studentName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY student_Student.studentName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.epam.sb.students.model.Student"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.epam.sb.students.model.Student"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.epam.sb.students.model.Student"),
            true);
    public static long STUDENTNAME_COLUMN_BITMASK = 1L;
    public static final String MAPPING_TABLE_STUDENT_STUDENTS_COURSES_NAME = "student_Students_Courses";
    public static final Object[][] MAPPING_TABLE_STUDENT_STUDENTS_COURSES_COLUMNS =
        {
            { "courseId", Types.BIGINT },
            { "studentId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_STUDENT_STUDENTS_COURSES_SQL_CREATE =
        "create table student_Students_Courses (courseId LONG not null,studentId LONG not null,primary key (courseId, studentId))";
    public static final boolean FINDER_CACHE_ENABLED_STUDENT_STUDENTS_COURSES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.student_Students_Courses"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.epam.sb.students.model.Student"));
    private static ClassLoader _classLoader = Student.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Student.class
        };
    private long _studentId;
    private String _studentName;
    private String _originalStudentName;
    private double _grade;
    private long _columnBitmask;
    private Student _escapedModel;

    public StudentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Student toModel(StudentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Student model = new StudentImpl();

        model.setStudentId(soapModel.getStudentId());
        model.setStudentName(soapModel.getStudentName());
        model.setGrade(soapModel.getGrade());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Student> toModels(StudentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Student> models = new ArrayList<Student>(soapModels.length);

        for (StudentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _studentId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setStudentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _studentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Student.class;
    }

    @Override
    public String getModelClassName() {
        return Student.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("studentId", getStudentId());
        attributes.put("studentName", getStudentName());
        attributes.put("grade", getGrade());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long studentId = (Long) attributes.get("studentId");

        if (studentId != null) {
            setStudentId(studentId);
        }

        String studentName = (String) attributes.get("studentName");

        if (studentName != null) {
            setStudentName(studentName);
        }

        Double grade = (Double) attributes.get("grade");

        if (grade != null) {
            setGrade(grade);
        }
    }

    @JSON
    @Override
    public long getStudentId() {
        return _studentId;
    }

    @Override
    public void setStudentId(long studentId) {
        _studentId = studentId;
    }

    @JSON
    @Override
    public String getStudentName() {
        if (_studentName == null) {
            return StringPool.BLANK;
        } else {
            return _studentName;
        }
    }

    @Override
    public void setStudentName(String studentName) {
        _columnBitmask = -1L;

        if (_originalStudentName == null) {
            _originalStudentName = _studentName;
        }

        _studentName = studentName;
    }

    public String getOriginalStudentName() {
        return GetterUtil.getString(_originalStudentName);
    }

    @JSON
    @Override
    public double getGrade() {
        return _grade;
    }

    @Override
    public void setGrade(double grade) {
        _grade = grade;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Student.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Student toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Student) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StudentImpl studentImpl = new StudentImpl();

        studentImpl.setStudentId(getStudentId());
        studentImpl.setStudentName(getStudentName());
        studentImpl.setGrade(getGrade());

        studentImpl.resetOriginalValues();

        return studentImpl;
    }

    @Override
    public int compareTo(Student student) {
        int value = 0;

        value = getStudentName().compareTo(student.getStudentName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Student)) {
            return false;
        }

        Student student = (Student) obj;

        long primaryKey = student.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        StudentModelImpl studentModelImpl = this;

        studentModelImpl._originalStudentName = studentModelImpl._studentName;

        studentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Student> toCacheModel() {
        StudentCacheModel studentCacheModel = new StudentCacheModel();

        studentCacheModel.studentId = getStudentId();

        studentCacheModel.studentName = getStudentName();

        String studentName = studentCacheModel.studentName;

        if ((studentName != null) && (studentName.length() == 0)) {
            studentCacheModel.studentName = null;
        }

        studentCacheModel.grade = getGrade();

        return studentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{studentId=");
        sb.append(getStudentId());
        sb.append(", studentName=");
        sb.append(getStudentName());
        sb.append(", grade=");
        sb.append(getGrade());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.epam.sb.students.model.Student");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>studentId</column-name><column-value><![CDATA[");
        sb.append(getStudentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>studentName</column-name><column-value><![CDATA[");
        sb.append(getStudentName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grade</column-name><column-value><![CDATA[");
        sb.append(getGrade());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
